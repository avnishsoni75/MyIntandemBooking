@page
@model MyIntandemBooking.Pages.Events.IndexModel
@using Microsoft.AspNetCore.Identity
@using MyIntandemBooking.Areas.Identity.Data
@inject SignInManager<MyInTandemBookingUser> SignInManager
@inject UserManager<MyInTandemBookingUser> UserManager

@using MyIntandemBooking.Authorization;
@using Microsoft.AspNetCore.Authorization
@using MyIntandemBooking.Models
@inject IAuthorizationService AuthorizationService

@{
    ViewData["Title"] = "Index";
}

<h2>Events</h2>

<p>
    <a asp-page="Create">Create New</a>
</p>

<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Events[0].Name)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Events[0].Description)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Events[0].DateTime)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Events[0].Location)
            </th>
            <th>
                Manager(s)
            </th>
            <th></th>
            <th></th>
            <th></th>
            @if (SignInManager.IsSignedIn(User))
            {
                <th></th>
            }
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.Events)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Description)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.DateTime)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Location)
                </td>
                <td>
                    @{
                        var managersList = item.ManagerAssignments.Select(x => x.User.Name);
                        var managers = string.Join(", ", managersList);
                    }
                    @managers
                </td>
                <td>
                    @if ((await AuthorizationService.AuthorizeAsync(User, item, Operations.Update)).Succeeded)
                    {
                        <a class="btn btn-primary btn-sm" asp-page="./Edit" asp-route-id="@item.ID">Edit</a>
                    }
                </td>
                <td>
                    <a class="btn btn-info btn-sm" asp-page="./Details" asp-route-id="@item.ID">Details</a>
                </td>
                <td>
                    @if (User.IsInRole(Constants.AdministratorsRole))
                    {
                        <a class="btn btn-danger btn-sm" asp-page="./Delete" asp-route-id="@item.ID">Cancel</a>
                    }
                </td>
                <td>

                    @if ((await AuthorizationService.AuthorizeAsync(User, item, Operations.Register)).Succeeded)
                    {
                        <form id="registerForm" asp-page="./Register" asp-route-id=@item.ID>
                            <button id="register" type="submit" class="btn btn-success btn-sm">Register</button>
                        </form>
                    }
                </td>
            </tr>
        }
    </tbody>
</table>
